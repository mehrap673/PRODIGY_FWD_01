Build a complete MERN stack authentication system in JavaScript (no TypeScript).

Backend (Node + Express + MongoDB):

User model with fields: name, email, password (hashed with bcrypt), and role (user/admin).

Auth routes:

POST /api/auth/register → create user, hash password, return JWT in HttpOnly cookie.

POST /api/auth/login → login with email + password, return JWT in HttpOnly cookie.

POST /api/auth/logout → clear cookie.

GET /api/auth/me → return current user (without password).

Protected routes:

/api/profile (only logged-in users).

/api/admin (only admin role).

Middleware:

authMiddleware → verify JWT from HttpOnly cookie or Authorization header.

permit(role) → restrict access to specific roles.

Use dotenv, cookie-parser, mongoose, bcrypt, jsonwebtoken.

Config files:

.env with MONGO_URI, JWT_SECRET, PORT, etc.

Organize backend with folders:

models/User.js

routes/auth.js

routes/protected.js

middleware/auth.js

middleware/roles.js

server.js

Frontend (React + Tailwind):

React Router with routes:

/register → signup form.

/login → login form.

/profile → show user info if logged in.

/admin → only show if role = admin.

Context API to store auth state (user info, logged in or not).

On app load, call /api/auth/me to check if logged in.

Authenticated API requests must use credentials: 'include'.

Navbar that updates based on login state (login/register buttons if logged out, profile/logout if logged in).

Simple UI with Tailwind:

Centered forms with name/email/password inputs.

Buttons styled with Tailwind (bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded).

Error/success messages displayed under forms.

Components:

AuthProvider.js (Context for auth state).

Register.js, Login.js, Profile.js, Admin.js.

Navbar.js.

App.js with router.

Final Requirements:

Use JavaScript only (no TypeScript).

Use MongoDB with Mongoose.

Backend listens on port 4000, frontend on 3000.

Proxy frontend requests (/api) to backend in vite.config.js.

Include a README.md with setup steps (npm install, run backend, run frontend).